from utils.logger import nemesysLogger

class ExploitManager:
    def __init__(self, client, exploit_name, payload_name, exploit_options=None, payload_options=None):
        """
        Initializes the ExploitManager with the given parameters to execute an exploit.

        Args:
            client (MetasploitClient): The Metasploit RPC client instance for interacting with Metasploit.
            exploit_name (str): The name of the exploit to run.
            payload_name (str): The name of the payload to use.
            exploit_options (dict, optional): The options for configuring the exploit module (default is None).
            payload_options (dict, optional): The options for configuring the payload module (default is None).
        """
        self.client = client
        self.exploit_name = exploit_name
        self.payload_name = payload_name
        self.exploit_options = exploit_options if exploit_options else {}
        self.payload_options = payload_options if payload_options else {}

    def run(self):
        """Executes the exploit with the specified parameters and returns the exploit UUID if successful."""
        exploit = self.client.modules.use("exploit", self.exploit_name)
        
        # Configure the exploit with the provided options
        for option, value in self.exploit_options.items():
            exploit[option] = value

        payload = self.client.modules.use("payload", self.payload_name)
        
        # Configure the payload with the provided options
        for option, value in self.payload_options.items():
            payload[option] = value

        nemesysLogger.info(f"üíÄ [EXPLOIT] Injecting exploit '{self.exploit_name}' with payload '{self.payload_name}'...")
        
        try:
            output = exploit.execute(payload=payload)
            nemesysLogger.info("üî• [EXPLOIT] Execution successful. System breached.")
            nemesysLogger.debug(f"üìù [DEBUG] Exploit output: {output}")
            
            # Return the exploit's UUID (unique identifier for the executed exploit)
            return output.get('uuid')
        
        except Exception as e:
            nemesysLogger.error(f"‚ùå [EXPLOIT] Error during execution: {e}")
            return None
